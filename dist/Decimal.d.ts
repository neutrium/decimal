export declare class Decimal {
    private static EXP_LIMIT;
    private static MAX_DIGITS;
    private static NUMERALS;
    private static LN10_STR;
    private static PI_STR;
    static LN10: Decimal;
    static PI: Decimal;
    private static LN10_PRECISION;
    private static PI_PRECISION;
    static precision: number;
    static rounding: number;
    static modulo: number;
    static toExpNeg: number;
    static toExpPos: number;
    static minE: number;
    static maxE: number;
    static external: boolean;
    static quadrant: any;
    private static decimalError;
    private static invalidArgument;
    private static precisionLimitExceeded;
    private static isDecimal;
    private static BASE;
    private static LOG_BASE;
    private static MAX_SAFE_INTEGER;
    static ROUND_UP: number;
    static ROUND_DOWN: number;
    static ROUND_CEIL: number;
    static ROUND_FLOOR: number;
    static ROUND_HALF_UP: number;
    static ROUND_HALF_DOWN: number;
    static ROUND_HALF_EVEN: number;
    static ROUND_HALF_CEIL: number;
    static ROUND_HALF_FLOOR: number;
    static EUCLID: number;
    d: number[];
    e: number;
    s: number;
    constructor(v: string | number | Decimal);
    abs(): Decimal;
    cbrt(): Decimal;
    ceil(): Decimal;
    cmp(w: Decimal | number): number;
    dp(): number;
    div(y: Decimal | number): any;
    divToInt(y: Decimal | number): Decimal;
    eq(y: Decimal | number): boolean;
    exp(): Decimal;
    floor(): Decimal;
    gt(y: any): boolean;
    gte(y: any): boolean;
    isFinite(): boolean;
    isInt(): boolean;
    isNaN(): boolean;
    isNeg(): boolean;
    isPos(): boolean;
    isZero(): boolean;
    lt(y: any): boolean;
    lte(y: any): boolean;
    ln(): Decimal;
    log(baseN: number | string | Decimal): Decimal;
    log10(): Decimal;
    log2(): Decimal;
    max(values: any): Decimal;
    min(values: any): Decimal;
    sub(y: any): Decimal;
    mod(y: any): Decimal;
    neg(): Decimal;
    add(y: any): any;
    precision(z?: boolean | number): number;
    round(): Decimal;
    sign(): number;
    mul(y: any): any;
    toDP(dp: any, rm: any): Decimal;
    sqrt(): Decimal;
    toExponential(dp: any, rm: any): any;
    toFixed(dp: any, rm: any): any;
    toFraction(maxD: any): any;
    toNearest(yy: number | string | Decimal, rm: number): Decimal;
    toNumber(): number;
    pow(yy: number | string | Decimal): Decimal;
    cos(): Decimal;
    acos(): any;
    cosh(): Decimal;
    acosh(): Decimal;
    sin(): Decimal;
    asin(): any;
    sinh(): Decimal;
    asinh(): Decimal;
    tan(): Decimal;
    atan(): any;
    static atan2(yy: number | string | Decimal, xx: number | string | Decimal): any;
    tanh(): any;
    atanh(): any;
    private toLessThanHalfPi(x);
    sine(x: Decimal): Decimal;
    private cosine(x);
    private taylorSeries(n, x, y, isHyperbolic?);
    toPrecision(sd: any, rm: any): any;
    toSignificantDigits(sd: any, rm: any): Decimal;
    toString(): string;
    trunc(): Decimal;
    valueOf(): string;
    private static digitsToString(d);
    private checkInt32(i, min, max);
    private static checkRoundingDigits(d, i, rm, repeating?);
    private static divide(x, y, pr?, rm?, dp?, base?);
    private static finalise(x, sd?, rm?, isTruncated?);
    private finiteToString(x, isExp?, sd?);
    private getBase10Exponent(digits, e);
    private getLn10(sd, pr?);
    private static getPi(sd, rm);
    private getPrecision(digits);
    private static getZeroString(k);
    private intPow(x, n, pr);
    private isOdd(n);
    private maxOrMin(values, ltgt);
    private static naturalExponential(x, sd?);
    private naturalLogarithm(y, sd?);
    private nonFiniteToString(x);
    private parseDecimal(x, str);
    private parseOther(x, str);
    private truncate(arr, len);
    static config(obj: any): typeof Decimal;
}
